From 18de735e2261575b5b17f241b650a495846606c1 Mon Sep 17 00:00:00 2001
From: fsfod <fsfod11@gmail.com>
Date: Sat, 13 Feb 2016 17:06:00 +0000
Subject: [PATCH 1/3] Added lua_newcdata/lua_register_cdatatype api

---
 src/lj_api.c   | 56 ++++++++++++++++++++++++++++++++++++++++++++++++++
 src/lj_ctype.c | 20 ++++++++++++++++++
 src/lj_ctype.h |  1 +
 src/lua.h      |  3 +++
 4 files changed, 80 insertions(+)

diff --git a/src/lj_api.c b/src/lj_api.c
index 8c60c058..66fc2e20 100644
--- a/src/lj_api.c
+++ b/src/lj_api.c
@@ -25,6 +25,8 @@
 #include "lj_vm.h"
 #include "lj_strscan.h"
 #include "lj_strfmt.h"
+#include "lj_ctype.h"
+#include "lj_cdata.h"
 
 /* -- Common helper functions --------------------------------------------- */
 
@@ -1311,3 +1313,57 @@ LUA_API void lua_setallocf(lua_State *L, lua_Alloc f, void *ud)
   g->allocf = f;
 }
 
+LUA_API int lua_register_ctype(lua_State *L, const char* name)
+{
+  CTState* cts = ctype_cts(L);
+  CType* ct;
+  /* Check if the existing struct has been registered already */
+  CTypeID id = lj_ctype_getname(cts, &ct, lj_str_newz(L, name), (1u<<CT_STRUCT));
+
+  if (id != 0) {
+    return id;/* Return the existing id */
+  }
+  return lj_ctype_newstruct(L, name, CTSIZE_INVALID);
+}
+
+LUA_API void *lua_newcdata(lua_State *L, int ctypeid)
+{
+  CTState* cts = ctype_cts(L);
+  CType* ct = ctype_get(cts, ctypeid);
+  GCcdata* cd = NULL;
+
+  if (ctype_isstruct(ct->info)) {
+    if (ct->size == CTSIZE_INVALID) {
+      lj_err_callermsg(L, "cannot create an incomplete struct ctype");
+    }
+    cd = lj_cdata_new(cts, ctypeid, ct->size);
+  } else if (ctype_isref(ct->info)) {
+    cd = lj_cdata_new(cts, ctypeid, ct->size);
+  } else {
+    lj_err_callermsg(L, "can only create cdata struct refs and cdata structs");
+  }
+
+  setcdataV(L, L->top++, cd);
+  return cdataptr(cd);
+}
+
+LUA_API void *lua_tocdata(lua_State *L, int idx, int ctypeid)
+{
+  CTState *cts = ctype_cts(L);
+  cTValue *o = index2adr(L, idx);
+  GCcdata* cdata = cdataV(o);
+
+  if (!tviscdata(o)) {
+    return NULL;
+  }
+
+  if (ctypeid != cdata->ctypeid && cdata->ctypeid != (ctypeid-1)) {
+    return NULL;
+  }
+
+  if (!cdataisv(cdata) && ctype_isptr(ctype_get(cts, cdata->ctypeid)->info)) {
+    return *(void **)cdataptr(cdata);
+  } else {
+    return cdataptr(cdata);
+  }
+}
diff --git a/src/lj_ctype.c b/src/lj_ctype.c
index 6741437c..1d9aba8c 100644
--- a/src/lj_ctype.c
+++ b/src/lj_ctype.c
@@ -265,6 +265,26 @@ CType *lj_ctype_getfieldq(CTState *cts, CType *ct, GCstr *name, CTSize *ofs,
   return NULL;  /* Not found. */
 }
 
+/* Create a named struct CType and pre-create a ref CType for it the id of the ref type will
+** always be 1 less then the returned typeid.
+*/
+CTypeID lj_ctype_newstruct(lua_State *L, const char* name, CTSize size)
+{
+  CTState* cts = ctype_cts(L);
+  CType* ct;
+  CTypeID structid;
+
+  /* Intern a ref type first */
+  lj_ctype_intern(cts, CTINFO_REF(cts->top+1), CTSIZE_PTR);
+  structid = lj_ctype_new(cts, &ct);
+  ctype_setname(ct, lj_str_newz(L, name));
+  lj_ctype_addname(cts, ct, structid);
+
+  ct->info = CTINFO(CT_STRUCT, 0);
+  ct->size = size;
+  return structid;
+}
+
 /* -- C type information -------------------------------------------------- */
 
 /* Follow references and get raw type for a C type ID. */
diff --git a/src/lj_ctype.h b/src/lj_ctype.h
index 700250df..63347484 100644
--- a/src/lj_ctype.h
+++ b/src/lj_ctype.h
@@ -456,6 +456,7 @@ static LJ_AINLINE void ctype_setname(CType *ct, GCstr *s)
 }
 
 LJ_FUNC CTypeID lj_ctype_new(CTState *cts, CType **ctp);
+LJ_FUNC CTypeID lj_ctype_newstruct(lua_State *L, const char* name, CTSize size);
 LJ_FUNC CTypeID lj_ctype_intern(CTState *cts, CTInfo info, CTSize size);
 LJ_FUNC void lj_ctype_addname(CTState *cts, CType *ct, CTypeID id);
 LJ_FUNC CTypeID lj_ctype_getname(CTState *cts, CType **ctp, GCstr *name,
diff --git a/src/lua.h b/src/lua.h
index 6d1634d1..8a2622de 100644
--- a/src/lua.h
+++ b/src/lua.h
@@ -153,6 +153,7 @@ LUA_API lua_CFunction   (lua_tocfunction) (lua_State *L, int idx);
 LUA_API void	       *(lua_touserdata) (lua_State *L, int idx);
 LUA_API lua_State      *(lua_tothread) (lua_State *L, int idx);
 LUA_API const void     *(lua_topointer) (lua_State *L, int idx);
+LUA_API void	       *(lua_tocdata)(lua_State *L, int idx, int ctypeid);
 
 
 /*
@@ -181,6 +182,8 @@ LUA_API void  (lua_rawget) (lua_State *L, int idx);
 LUA_API void  (lua_rawgeti) (lua_State *L, int idx, int n);
 LUA_API void  (lua_createtable) (lua_State *L, int narr, int nrec);
 LUA_API void *(lua_newuserdata) (lua_State *L, size_t sz);
+LUA_API void* (lua_newcdata)(lua_State *L, int ctypeid);
+LUA_API int   (lua_register_ctype)(lua_State *L, const char* name);
 LUA_API int   (lua_getmetatable) (lua_State *L, int objindex);
 LUA_API void  (lua_getfenv) (lua_State *L, int idx);
 
-- 
2.32.0


From c8fbcb95a6bb4dbec6ea79746bc17d40fd5dc78d Mon Sep 17 00:00:00 2001
From: fsfod <fsfod11@gmail.com>
Date: Mon, 22 Feb 2016 17:02:00 +0000
Subject: [PATCH 2/3] lua_push_ffi_lib, lua_fficdef for binding internal apis
 from C

---
 src/lib_ffi.c   | 15 ++++++++----
 src/lj_api.c    | 34 ++++++++++++++++++++++++++
 src/lj_clib.c   | 64 +++++++++++++++++++++++++++++++++++++++++++++++--
 src/lj_clib.h   |  4 +++-
 src/lj_cparse.c | 64 +++++++++++++++++++++++++++++++++++++++++++++++--
 src/lj_obj.h    |  1 +
 src/lua.h       | 11 +++++++++
 7 files changed, 184 insertions(+), 9 deletions(-)

diff --git a/src/lib_ffi.c b/src/lib_ffi.c
index b4321048..cb115ac2 100644
--- a/src/lib_ffi.c
+++ b/src/lib_ffi.c
@@ -473,20 +473,25 @@ LJLIB_PUSH(top-1) LJLIB_SET(__index)
 
 #define LJLIB_MODULE_ffi
 
-LJLIB_CF(ffi_cdef)
+void ffi_cdef(lua_State* L, const char* cdef)
 {
-  GCstr *s = lj_lib_checkstr(L, 1);
   CPState cp;
   int errcode;
   cp.L = L;
   cp.cts = ctype_cts(L);
-  cp.srcname = strdata(s);
-  cp.p = strdata(s);
+  cp.srcname = cdef;
+  cp.p = cdef;
   cp.param = L->base+1;
   cp.mode = CPARSE_MODE_MULTI|CPARSE_MODE_DIRECT;
   errcode = lj_cparse(&cp);
   if (errcode) lj_err_throw(L, errcode);  /* Propagate errors. */
   lj_gc_check(L);
+}
+
+LJLIB_CF(ffi_cdef)
+{
+  GCstr *s = lj_lib_checkstr(L, 1);
+  ffi_cdef(L, strdata(s));
   return 0;
 }
 
@@ -858,6 +863,8 @@ LUALIB_API int luaopen_ffi(lua_State *L)
   LJ_LIB_REG(L, NULL, ffi_callback);
   /* NOBARRIER: the key is new and lj_tab_newkey() handles the barrier. */
   settabV(L, lj_tab_setstr(L, cts->miscmap, &cts->g->strempty), tabV(L->top-1));
+  /* save away the clib metatable for lua_push_ffi_lib*/
+  setgcref(G(L)->gcroot[GCROOT_FFI_CLIBMT], obj2gco(tabV(L->top-2)));
   L->top--;
   lj_clib_default(L, tabV(L->top-1));  /* Create ffi.C default namespace. */
   lua_pushliteral(L, LJ_OS_NAME);
diff --git a/src/lj_api.c b/src/lj_api.c
index 66fc2e20..2ff8c8dd 100644
--- a/src/lj_api.c
+++ b/src/lj_api.c
@@ -27,6 +27,7 @@
 #include "lj_strfmt.h"
 #include "lj_ctype.h"
 #include "lj_cdata.h"
+#include "lj_clib.h"
 
 /* -- Common helper functions --------------------------------------------- */
 
@@ -1367,3 +1368,36 @@ LUA_API void *lua_tocdata(lua_State *L, int idx, int ctypeid)
     return cdataptr(cdata);
   }
 }
+
+static int bindfunctions(lua_State* L)
+{
+  void* funcs = lua_touserdata(L, 1);
+  CLibrary* cl = clib_new(L, tabref(G(L)->gcroot[GCROOT_FFI_CLIBMT]));
+  /* prevent looking up non existing symbols in the default dlls and exes */
+  cl->readonly = 1;
+
+  lj_clib_bindfunctions(L, cl, (clib_functions*)funcs);
+  return 1;
+}
+
+LUA_API int lua_push_ffi_lib(lua_State *L, clib_functions* funcs)
+{
+  lua_pushcfunction(L, bindfunctions);
+  lua_pushlightuserdata(L, funcs);
+  return lua_pcall(L, 1, 1, 0);
+}
+
+extern void ffi_cdef(lua_State* L, const char* cdef);
+
+int call_cdef(lua_State* L)
+{
+  ffi_cdef(L, lua_tostring(L, 1));
+  return 0;
+}
+
+LUA_API int lua_fficdef(lua_State *L, const char* cdef)
+{
+  lua_pushcfunction(L, call_cdef);
+  lua_pushstring(L, cdef);
+  return lua_pcall(L, 1, 0, 0);
+}
\ No newline at end of file
diff --git a/src/lj_clib.c b/src/lj_clib.c
index d8636a48..08d31de0 100644
--- a/src/lj_clib.c
+++ b/src/lj_clib.c
@@ -17,6 +17,7 @@
 #include "lj_cdata.h"
 #include "lj_clib.h"
 #include "lj_strfmt.h"
+#include "lj_cparse.h"
 
 /* -- OS-specific functions ----------------------------------------------- */
 
@@ -341,7 +342,20 @@ static const char *clib_extsym(CTState *cts, CType *ct, GCstr *name)
 /* Index a C library by name. */
 TValue *lj_clib_index(lua_State *L, CLibrary *cl, GCstr *name)
 {
-  TValue *tv = lj_tab_setstr(L, cl->cache, name);
+  TValue *tv;
+  /* Don't try to lookup exported symbols for readonly C libraries */
+  if(cl->readonly == 1){
+    tv = (TValue*)lj_tab_getstr(cl->cache, name);
+
+    if(tv == NULL || tvisnil(tv)){
+      lj_err_callerv(L, LJ_ERR_FFI_NODECL, strdata(name));
+    }
+
+    return tv;
+  }else{
+    tv = lj_tab_setstr(L, cl->cache, name);
+  }
+
   if (LJ_UNLIKELY(tvisnil(tv))) {
     CTState *cts = ctype_cts(L);
     CType *ct;
@@ -396,12 +410,14 @@ TValue *lj_clib_index(lua_State *L, CLibrary *cl, GCstr *name)
 /* -- C library management ------------------------------------------------ */
 
 /* Create a new CLibrary object and push it on the stack. */
-static CLibrary *clib_new(lua_State *L, GCtab *mt)
+CLibrary *clib_new(lua_State *L, GCtab *mt)
 {
   GCtab *t = lj_tab_new(L, 0, 0);
   GCudata *ud = lj_udata_new(L, sizeof(CLibrary), t);
   CLibrary *cl = (CLibrary *)uddata(ud);
+  cl->handle = NULL;
   cl->cache = t;
+  cl->readonly = 0;
   ud->udtype = UDTYPE_FFI_CLIB;
   /* NOBARRIER: The GCudata is new (marked white). */
   setgcref(ud->metatable, obj2gco(mt));
@@ -431,4 +447,48 @@ void lj_clib_default(lua_State *L, GCtab *mt)
   cl->handle = CLIB_DEFHANDLE;
 }
 
+/* binds a list of function definitions to a corresponding function pointer and inserts the function into the provided clib*/
+void lj_clib_bindfunctions(lua_State *L, CLibrary *cl, clib_functions* functions)
+{
+  CTState *cts = ctype_cts(L);
+  GCcdata* cd;
+  CPState cp;
+  GCstr* name = NULL;
+
+  cp.L = L;
+  cp.cts = cts;
+  cp.mode = CPARSE_MODE_ABSTRACT|CPARSE_MODE_NOIMPLICIT|CPARSE_MODE_DIRECT;
+
+  lj_gc_anybarriert(L, cl->cache);
+
+  for (; functions->def ; functions++){    
+    int errcode;
+ 
+    cp.srcname = functions->def;
+    cp.p = functions->def;
+    cp.param = NULL;
+    errcode = lj_cparse(&cp);
+    if (errcode){
+      lj_err_throw(L, errcode);  /* Propagate errors. */   
+    }
+
+    if(cp.val.id == 0){
+      lua_assert(0 && "failed to parse function declaration");
+      //just skip to the next one
+      continue;
+    }
+
+    cd = lj_cdata_new(cts, cp.val.id, CTSIZE_PTR);
+    *(void **)cdataptr(cd) = functions->address;
+
+    name = strref(ctype_get(cts, cp.val.id)->name);
+
+    if(name == NULL){
+      lj_err_callermsg(L, "function definition has no name");
+    }
+
+    setcdataV(L, lj_tab_setstr(L, cl->cache, name), cd);
+  }
+}
+
 #endif
diff --git a/src/lj_clib.h b/src/lj_clib.h
index 848543d5..0da9ce5e 100644
--- a/src/lj_clib.h
+++ b/src/lj_clib.h
@@ -17,13 +17,15 @@
 typedef struct CLibrary {
   void *handle;		/* Opaque handle for dynamic library loader. */
   GCtab *cache;		/* Cache for resolved symbols. Anchored in ud->env. */
+  int readonly;     /* if set to 1 don't try to lookup symbols that are not in the cache already */
 } CLibrary;
 
+LJ_FUNC CLibrary *clib_new(lua_State *L, GCtab *mt);
 LJ_FUNC TValue *lj_clib_index(lua_State *L, CLibrary *cl, GCstr *name);
 LJ_FUNC void lj_clib_load(lua_State *L, GCtab *mt, GCstr *name, int global);
 LJ_FUNC void lj_clib_unload(CLibrary *cl);
 LJ_FUNC void lj_clib_default(lua_State *L, GCtab *mt);
-
+LJ_FUNC void lj_clib_bindfunctions(lua_State *L, CLibrary *cl, clib_functions* functions);
 #endif
 
 #endif
diff --git a/src/lj_cparse.c b/src/lj_cparse.c
index efe80759..84d50d2d 100644
--- a/src/lj_cparse.c
+++ b/src/lj_cparse.c
@@ -1894,6 +1894,60 @@ static void cp_decl_single(CPState *cp)
   if (cp->tok != CTOK_EOF) cp_err_token(cp, CTOK_EOF);
 }
 
+static void cp_decl_singledirect(CPState *cp)
+{
+  int first = 1;
+  while (cp->tok != CTOK_EOF) {
+    CPDecl decl;
+    CPscl scl;
+
+    scl = cp_decl_spec(cp, &decl, CDF_TYPEDEF|CDF_EXTERN|CDF_STATIC);
+    if ((cp->tok == ';' || cp->tok == CTOK_EOF) && ctype_istypedef(decl.stack[0].info)) {
+      CTInfo info = ctype_rawchild(cp->cts, &decl.stack[0])->info;
+
+      if (ctype_isstruct(info) || ctype_isenum(info))
+	goto decl_end;  /* Accept empty declaration of struct/union/enum. */
+    }
+
+    for (;;) {
+      CTypeID ctypeid;
+      cp_declarator(cp, &decl);
+      ctypeid = cp_decl_intern(cp, &decl);
+      if (decl.name && !decl.nameid) {  /* NYI: redeclarations are ignored. */
+	CType *ct;
+	CTypeID id;
+	
+        if(!ctype_isfunc(ctype_get(cp->cts, ctypeid)->info)) {
+          cp->val.id = 0;
+          lua_assert(0 && "definition is not a function");
+          return;
+        }
+
+	/* Treat both static and extern function declarations as extern. */
+	ct = ctype_get(cp->cts, ctypeid);
+	/* We always get new anonymous functions (typedefs are copied). */
+	lua_assert(gcref(ct->name) == NULL);
+	id = ctypeid;  /* Just name it. */
+        
+        cp->val.id = id;
+
+	ctype_setname(ct, decl.name);
+	lj_ctype_addname(cp->cts, ct, id);
+      }else{
+        cp->val.id = 0;
+        lua_assert(0 && "function already declared");
+        return;
+      }
+      if (!cp_opt(cp, ',')) break;
+      cp_decl_reset(&decl);
+    }
+  decl_end:
+    if (cp->tok == CTOK_EOF && first) break;  /* May omit ';' for 1 decl. */
+    first = 0;
+    cp_check(cp, ';');
+  }
+}
+
 /* ------------------------------------------------------------------------ */
 
 /* Protected callback for C parser. */
@@ -1905,8 +1959,14 @@ static TValue *cpcparser(lua_State *L, lua_CFunction dummy, void *ud)
   cp_init(cp);
   if ((cp->mode & CPARSE_MODE_MULTI))
     cp_decl_multi(cp);
-  else
-    cp_decl_single(cp);
+  else{
+    if(cp->mode & CPARSE_MODE_DIRECT){
+      cp_decl_singledirect(cp);
+    }else{
+      cp_decl_single(cp);
+    }
+  }
+
   if (cp->param && cp->param != cp->L->top)
     cp_err(cp, LJ_ERR_FFI_NUMPARAM);
   lj_assertCP(cp->depth == 0, "unbalanced cparser declaration depth");
diff --git a/src/lj_obj.h b/src/lj_obj.h
index 1a6445fc..6588b391 100644
--- a/src/lj_obj.h
+++ b/src/lj_obj.h
@@ -577,6 +577,7 @@ typedef enum {
   GCROOT_MMNAME_LAST = GCROOT_MMNAME + MM__MAX-1,
   GCROOT_BASEMT,	/* Metatables for base types. */
   GCROOT_BASEMT_NUM = GCROOT_BASEMT + ~LJ_TNUMX,
+  GCROOT_FFI_CLIBMT,
   GCROOT_IO_INPUT,	/* Userdata for default I/O input file. */
   GCROOT_IO_OUTPUT,	/* Userdata for default I/O output file. */
   GCROOT_MAX
diff --git a/src/lua.h b/src/lua.h
index 8a2622de..43b32c7d 100644
--- a/src/lua.h
+++ b/src/lua.h
@@ -172,6 +172,17 @@ LUA_API void  (lua_pushboolean) (lua_State *L, int b);
 LUA_API void  (lua_pushlightuserdata) (lua_State *L, void *p);
 LUA_API int   (lua_pushthread) (lua_State *L);
 
+typedef struct{
+  void* address;
+  const char* def;
+}clib_functions;
+
+/* creates and pushes onto the stack a ffi c lib by binding a list of function pointers to function definitions */
+LUA_API int (lua_push_ffi_lib) (lua_State *L, clib_functions* funcs);
+
+/* the return value is a pcall result so if there are parse errors*/
+LUA_API int (lua_fficdef) (lua_State *L, const char* cdef);
+
 
 /*
 ** get functions (Lua -> stack)
-- 
2.32.0


From 2bd1d20a5c891c7bba5a097c753db847534f1300 Mon Sep 17 00:00:00 2001
From: synxroform <datastate@gmail.com>
Date: Thu, 4 Nov 2021 01:06:33 +0300
Subject: [PATCH 3/3] =fix undefined reference to lua_assert

---
 src/Makefile    | 4 ++--
 src/lj_clib.c   | 1 +
 src/lj_cparse.c | 1 +
 3 files changed, 4 insertions(+), 2 deletions(-)

diff --git a/src/Makefile b/src/Makefile
index 2538503f..b54a6fe0 100644
--- a/src/Makefile
+++ b/src/Makefile
@@ -71,10 +71,10 @@ CCWARN= -Wall
 # as dynamic mode.
 #
 # Mixed mode creates a static + dynamic library and a statically linked luajit.
-BUILDMODE= mixed
+#BUILDMODE= mixed
 #
 # Static mode creates a static library and a statically linked luajit.
-#BUILDMODE= static
+BUILDMODE= static
 #
 # Dynamic mode creates a dynamic library and a dynamically linked luajit.
 # Note: this executable will only run when the library is installed!
diff --git a/src/lj_clib.c b/src/lj_clib.c
index 08d31de0..1ca49d76 100644
--- a/src/lj_clib.c
+++ b/src/lj_clib.c
@@ -18,6 +18,7 @@
 #include "lj_clib.h"
 #include "lj_strfmt.h"
 #include "lj_cparse.h"
+#include "lualib.h"
 
 /* -- OS-specific functions ----------------------------------------------- */
 
diff --git a/src/lj_cparse.c b/src/lj_cparse.c
index 84d50d2d..83df9518 100644
--- a/src/lj_cparse.c
+++ b/src/lj_cparse.c
@@ -17,6 +17,7 @@
 #include "lj_char.h"
 #include "lj_strscan.h"
 #include "lj_strfmt.h"
+#include "lualib.h"
 
 /*
 ** Important note: this is NOT a validating C parser! This is a minimal
-- 
2.32.0

